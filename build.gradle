/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2019 Patrick Reinhart
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    id 'java'
    id 'eclipse'
    id 'org.owasp.dependencycheck' version '5.2.4'
    id 'org.kordamp.gradle.java-project' version '0.30.4'
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = '**undefined**'
if (!project.hasProperty('bintrayApiKey'))   ext.bintrayApiKey   = '**undefined**'
if (!project.hasProperty('ossrhUsername'))   ext.ossrhUsername   = '**undefined**'
if (!project.hasProperty('ossrhPassword'))   ext.ossrhPassword   = '**undefined**'

defaultTasks 'build'

configurations {
    asciidoclet
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly 'jakarta.platform:jakarta.jakartaee-api:8.0.0'

    compile 'org.slf4j:slf4j-api:1.7.29'
    compile 'com.rabbitmq:amqp-client:5.7.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    
    testCompile 'jakarta.platform:jakarta.jakartaee-api:8.0.0'
    testCompile 'org.hamcrest:hamcrest:2.2'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testCompile 'org.mockito:mockito-core:3.2.0'
    testCompile 'org.mockito:mockito-junit-jupiter:3.2.0'
    
    runtimeOnly 'org.junit.platform:junit-platform-runner:1.5.2'
    runtimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '-Xlint:all'
        ]
    }
}

//signing {
//    required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
//    sign publishing.publications
//}

jar {
    manifest.attributes 'Automatic-Module-Name': "net.reini.rabbitmq.cdi"
}

test {
    useJUnitPlatform()
    testLogging {
        events 'skipped'
    }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr', 'preview'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        vendor = 'reinhapa'
        name = 'RabbitMQ JavaEE/JakartaEE CDI enabler'
        description = 'Enables CDI based usage of RabbitMQ within a JavaEE/JakartaEE application.'
        inceptionYear = '2015'
        links {
            website = 'https://github.com/reinhapa/rabbitmq-cdi'
            issueTracker = 'https://github.com/reinhapa/rabbitmq-cdi/issues'
            scm = 'https://github.com/reinhapa/rabbitmq-cdi.git'
        }
        scm {
            connection = 'scm:git://github.com/reinhapa/rabbitmq-cdi.git'
            developerConnection = 'scm:git://github.com/reinhapa/rabbitmq-cdi.git'
            url = 'https://github.com/reinhapa/rabbitmq-cdi'
        }
        people {
            person {
                id = 'reinhapa'
                name = 'Patrick Reinhart'
                email = 'patrick@reini.net'
                roles = [ 'developer' ]
            }
            person {
                id = 'ohumbel'
                name = 'Otmar Humbel'
                email = 'ohumbel@gmail.com'
                roles = [ 'developer' ]
            }
        }
        repositories {
            repository {
                name = 'localRelease'
                url  = "${project.rootProject.buildDir}/repos/staging/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "${project.rootProject.buildDir}/repos/staging/snapshot"
            }
        }
        credentials {
            sonatype {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    licensing {
        licenses {
            license {
                id = 'MIT'
            }
        }
    }
    javadoc {
        autoLinks {
            enabled = false
        }
    }
    publishing {
        signing             = false
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }
    bintray {
        enabled      = true
        userOrg      = 'reinhapa'
        name         = rootProject.name
        credentials {
            username = bintrayUsername
            password = bintrayApiKey
        }
    }
}

normalization {
    runtimeClasspath {
        ignore('/META-INF/MANIFEST.MF')
    }
}
